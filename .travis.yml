language: minimal

services:
  - docker

stages:
  - name: Build and Push
  - name: Deploy

branches:
  only:
    - develop

jobs:
  include:
    - stage: Build and Push
      script:
        - docker-compose build
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - docker-compose push
        - docker logout

    - stage: Deploy
      before_script:
        - mkdir -p /home/travis/.ssh
        - openssl aes-256-cbc -K $encrypted_b94b5bb7b73b_key -iv $encrypted_b94b5bb7b73b_iv -in travis_key.enc -out /home/travis/.ssh/travis_key -d
        - chmod 600 /home/travis/.ssh/travis_key
      script:
        # Into the VM, create the /app directory and paste docker-compose into it
        - SSH_OPTIONS="-o StrictHostKeyChecking=no -i /home/travis/.ssh/travis_key"
        - SSH_COMMAND="ssh $SSH_OPTIONS $GCP_USER@$GCP_VM_IP"
        - SCP_COMMAND="scp $SSH_OPTIONS ./docker-compose.deploy.yml $GCP_USER@$GCP_VM_IP:/home/$GCP_USER/app/docker-compose.yml"

        - $SSH_COMMAND "mkdir -p /home/$GCP_USER/app"
        - $SCP_COMMAND

        # Into the VM, setup the .env file
        - ENV_COMMAND="echo 'export ENV=\"prod\"' > .env"
        - ENV_COMMAND+=" && echo 'export PGUSER=$PGUSER' >> .env"
        - ENV_COMMAND+=" && echo 'export PGPASSWORD=$PGPASSWORD' >> .env"
        - ENV_COMMAND+=" && echo 'export PGDATABASE=$PGDATABASE' >> .env"
        - ENV_COMMAND+=" && echo 'export PGPORT=$PGPORT' >> .env"
        - ENV_COMMAND+=" && echo 'export PGHOST=$PGHOST' >> .env"
        - ENV_COMMAND+=" && echo 'export SECRET_KEY=$SECRET_KEY' >> .env"
        - ENV_COMMAND+=" && echo 'export SENDGRID_API_KEY=$SENDGRID_API_KEY' >> .env"
        - ENV_COMMAND+=" && echo 'export VITE_FRONT_URL=$VITE_FRONT_URL' >> .env"
        - ENV_COMMAND+=" && echo 'export VITE_API_URL=$VITE_API_URL' >> .env"
        - $SSH_COMMAND "cd /home/$GCP_USER/app && $ENV_COMMAND"

        # Into the VM, clean and run docker-compose
        - DOCKER_COMMAND="cd /home/$GCP_USER/app && docker-compose down"
        - DOCKER_COMMAND+=" && docker rm -f db api ui"
        - DOCKER_COMMAND+=" && docker image rm -f edgarcrssn/time-manager-ui edgarcrssn/time-manager-api"
        - DOCKER_COMMAND+=" && docker-compose pull"
        - DOCKER_COMMAND+=" && docker-compose up -d"
        - $SSH_COMMAND "$DOCKER_COMMAND"

